const BigNumber = require('bignumber.js')

function random (start, end) {
  return BigNumber.random().times(end.minus(start)).integerValue(BigNumber.ROUND_FLOOR).plus(start)
}

function gcd (a, b) {
  if (b.isZero()) {
    return a
  }
  return gcd(b, a.mod(b))
}

function egcd (a, b) {
  if (b.isZero()) {
    return [new BigNumber(1), new BigNumber(0), a]
  }
  let [x, y, q] = egcd(b, a.mod(b))
  return [y, x.minus(a.div(b).integerValue(BigNumber.ROUND_FLOOR).times(y)), q]
}

function mod_invert (a, b) {
  let [x, y, q] = egcd(a, b)
  if (!q.eq(1)) {
    throw new Error('modular inverse does not exist')
  }
  return x.mod(b)
}

function getpq (n, e, d) {
  let p = new BigNumber(1)
  let q = new BigNumber(1)
  while (p.eq(1) && q.eq(1)) {
    let k = d.times(e).minus(1)
    let g = random(0, n)
    while (p.eq(1) && q.eq(1) && k.mod(2).eq(0)) {
      k = k.div(2)
      let y = g.pow(k, n)
      if (!y.eq(1) && gcd(y.minus(1), n).isGreaterThan(1)) {
        p = gcd(y.minus(1), n)
        q = n.div(p)
      }
    }
  }
  return [p, q]
}

function getd (n, e, dp) {
  n = new BigNumber(n)
  e = new BigNumber(e)
  dp = new BigNumber(dp)
  for (let i = new BigNumber(1); i.isLessThan(e); i = i.plus(1)) {
    if (dp.times(e).minus(1).mod(i).isZero()) {
      let p = dp.times(e).minus(1).div(i).plus(1)
      if (n.mod(p).isZero()) {
        let q = n.div(p)
        let phi = p.minus(1).times(q.minus(1))
        let d = mod_invert(e, phi).mod(phi)
        return d
      }
    }
  }
}

;(() => {
  const e = '65537'
  const n = '444511907374811621333864968430251419855347882081695888904531795366857517417289716213363408137550866409163408633679685635315881237914815762134949770798439327373469286675370381115822381092997433491238495970527484356127131132345893007368069814286822931047915482947544230741924674880304607902413527794657556174021361113759962742306966643629644800759209829893438222447478882663573891473386520138017997195362559918730232709719486847337248425121547893862458228964360472119045154255446606447184782930767120924229261090464514045697735201016333117579385787597262783543886217220299959364476125167328883418109849139384318692440116746717156025869399990008034002881758452936213924306428955442475834311604905905260723607788504332389824348292286402781474054375184928462870240017012586229806658850881803134678565293180207556731290044948846308165695896369703720482941116135445836684836990286418102640883844706122407701782360072256987197118468391662366105964629786899281484884877640733549203394680006068637251717623691598753570260479050407069262236583726905151495550801274277155039839844872050380772537409714164680083539118124646217833871816488578092001365486400242215564766336041803413006183310354910820598373905617564797817421231716827155927723376783'
  const dp = '20688083194401098183398626094352469308150523583583104270723199988926694776131531953207031668652408481119466919329893607763657623952024909876740067584191851505244658377465365020503008072292716279306615911408934182303357474341329766407852983275790499225322862499664901633190925232802162977135254216707834894816730529759991634343322039528413883937752397011466779521590767711786777317159161700645318091278528395252576086979838790917201179739657819356771788743301669430631157222234922010934163688512789947321007479617996170289230676037655762865962020063056831019134814970048718940037920888121806608032574204482673114726401'
  const c = '378245912689862819668716257795108255336928883693984263805908702337591160408234974716356292413190786704878880742998101926728409825216339197208512929079484687018187263522243781958701468849915372674337274640196043362477406890622345686503512151501592397926764442945655423801602100185867239106836704835215686246083812117439685990637352246191517010645343417283169123105697782747026231044064639955374854873089604766677942725374108213749982052985866259433900255218180285975477045323647923881322428349632056484406017564586481848442834247385904402824072352354677823823078646874632195128328299942128116508251564811923564362991466660005438580449558184197006623490303413636461137434703925564785299335803341222051570131842042120923719184091689629809380828306649702440460761848154682611972768099340896995546188526274235118488618951865589050087434162728116205149188555273127955536588551565951618535230908129965250151258048934985977493740897420718340268536363763127676899114219828753570040978640121185354431884041597851910784347040946251752577201426797684912671641470307249794269755972278013107831885544781029384256069586713714201822683071958299038410102821213570933652719191413490563464823296852894960994148922867149263897530215474500564443133161527'

  const d = getd(n, e, dp)
  const m = (new BigNumber(c)).pow(d.integerValue(), new BigNumber(n))
  const plain = Buffer.from(m.toString(16), 'hex').toString()
  console.log(plain)
})()
